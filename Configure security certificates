// Azure App Sevice has tools that let you create, upload, or import a private certificate or a public certificate into App Service
// A certificate uploaded into an app is stored in a deployment unit that's bound to the app service plan's resource group and region combination (internally called a webspace)
// This makes the certificate accessible to other apps in the same resource group and region combination
TABLE BELOW DETAILS THE OPTIONS YOU HAVE FOR ADDING CERTIFICATES IN APP SERVICE
Option / Description
Create a free App Service managed certificate	/ A private certificate that's free of charge and easy to use if you just need to secure your custom domain in App Service.
Purchase an App Service certificate	/ A private certificate that's managed by Azure. It combines the simplicity of automated certificate management and the flexibility of renewal and export options.
Import a certificate from Key Vault / Useful if you use Azure Key Vault to manage your certificates.
Upload a private certificate / If you already have a private certificate from a third-party provider, you can upload it.
Upload a public certificate / Public certificates are not used to secure custom domains, but you can load them into your code if you need them to access remote resources.
PRIVATE CERTIFICATE REQUIREMNETS:
- The free App service managed certificate and the App Service certificate already satisfy the requirements of App Service. If you want to use a private certificate in App Service, your certificate must meet the following requirements:
    - Exported as a password protected PFX file, encrypted using triple DES
    - Contains private key at least 2048 bits long
    - Contains all intermediate certificates in the certificate chain
- To secure a custom domain in a TLS binding, the certificate has additional requirements
  - Contains an Extended Key Usage for server authentication (OID = 1.3.6.1.5.5.7.3.1)
  - Signed by a trusted certificate authority
CREATING A FREE MANAGED CERTIFICATE:
- To create custom TLS/SSL bindings are enabled client certificates for your APP Service app, your App Service plan must be in the Basic, Standard, Premium, or Isolated tier
  -Custom SSl isn't supported in the F1 or D1 tier
-The free App Service managed certificate is a turn key solution for securing your custom DNS name in App Service. 
-It's a TLS/SSL server certificate thats fully managed by App Service and renewed continuously and automatically in 6 month increments. 45 days b4 expiration. You create the certificate and bind it to a custom domain, and let App Service do the rest
The free certificate comes w/ the following limitations
  - doesn't support wild card certificates
  - doens't suopport usage as a client certificate by certificate thumbprint
  - isn't exportable
  - isn't supported on App Service Environment (ASE)
  - isn't supported with root domains that are integrated with Traffic Manager
  - If a certificate is for a CNAME- mapped domain, the CNAME must be mapped directly to <app-name>.azurewebsites.net
IMPORT AN APP SERVICE CERTIFICATE
- If you purchase an App Service Certificate from Azure, Azure manages the following tasks
  - Takes care of the purchase process from GoDaddy
  - Performs domain verification of the certificate
  - Maintains the certificate in Azure Key vault
  - Manages certificate renewal
  - Synchronize the certificate automatically with the imported copies in App Service apps 
If you already have a working App Service certificate, you can
  - import the certificate into App Service
  -Manage the certificate, such as renew, rekey , and export it 
UPLOAD A PRIVATE CERTIFICATE 
- If your certificate authority gives you multiple certificates in the certoficate chain, you need to merge the certificates in order. Then you can EXPORT your merged TSL/SSL certificate request was generated wiih
. If you generated your certificate request using OpenSSL, then you make a private key file
- To export your certificate to PFX, run the following command: 1. Replace the placeholders <private-key-file> and <merged-certificate-file> w/ the paths to your private key & your merged certificate file
openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
  2. When prompted, define an export password. You use this password when uploaded your TLS/SSL certificate to App Service
ENFORCE HTTPS
// By Default, anyone can still access your app using HTTP
// You can redirect all HTTP requests to the HTTPs port by navigating to your app page and, in the left navigation, select TLS/SSL. Then, in HTTPS ONLY, press ON
